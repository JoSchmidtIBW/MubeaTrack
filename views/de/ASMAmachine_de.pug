extends base

mixin navItem(link, text, icon, active)
    li(class=`${active ? 'side-nav--active' : ''}`)
        a(href=`${link}`)
            svg
                use(xlink:href=`/img/icons.svg#icon-${icon}`)
            | #{text}

block content
    main.mainASMAmachine
        .user-viewASMAmachine
            nav.user-view__menu

                ul.side-nav
                    +navItem('#', `${data.machine.name}`, 'machine', true)
                    +navItem('#', 'Aufträge', 'list')
                    +navItem('#', 'Sonstige', 'settings')
                .admin-navs
                    h5.admin-nav__heading ASMA
                    ul.side-nav
                        +navItem('#', 'Störmeldungen', 'user-error-report', true)
                        +navItem('#', 'Verbrauchsmaterial', 'alert-circle')
                        +navItem('#', 'Prüfmittel', 'alert-octagon')

            .user-view__content
                .user-view__ASMAform-container
                    h2.heading-secondary.ma-bt-md Maschinen- Reporter
                    br
                    br
                    button.btn.stoerBtn(id="machineStatusRunBtn" style=(data.machine.statusRun ? 'background-color: lightgreen' : 'background-color: #E93A48')
                        data-statusRun=(data.machine.statusRun ? 'true' : 'false'),data-machineIDRun=data.machine._id) Anlage Läuft!!
                    br
                    table
                      br
                      each sector in data.machine.sectorASMA
                          tr
                              td(colspan="2")
                                  br
                                  h1(style='color: lightgrey;') _______________________________________________________________________________________________________________________________________
                                  br
                                  br
                                  h1= sector.name
                                  h4= sector.description_de
                                  br
                                  br
                                  br
                          each component in sector.components
                              tr
                                  td
                                      h2= component.name_de
                                      h4= component.description_de
                                      br
                                  td
                                      table
                                        each detail, index in component.componentDetails
                                            if index % 4 === 0
                                                tr
                                            td(style="border: 1px solid white; padding: 10px; margin: 5px;")
                                                - const popupID = `${index}-${Date.now()}`;
                                                button.btn.btn--small.stoerBtn.popup-trigger(
                                                    class=`stoerBtn-${index}`,
                                                    id=`stoerBtn-${index}`,
                                                    style=(detail.status ? 'background-color: #50BE5F; color: white' : 'background-color: red; color: white'),
                                                    data-status=(detail.status ? 'true' : 'false'),
                                                    data-detail-id=detail._id
                                                )
                                                   div(id=`popup-${index}` class="popup")= detail.name_de
                                                      each malReport in data.malReports
                                                          if(detail._id.toString() === malReport.idComponentDetail_Mal)
                                                              span( class="popuptext" id="myPopup-${popupID}" style="font-size:8px")
                                                                  p= malReport.logFal_Repair[0].messageProblem_de_Repair
                                                                  p= malReport.logFal_Repair[0].messageMission_de_Repair

                                                each malReport in data.malReports
                                                    if(detail._id.toString() === malReport.idComponentDetail_Mal)
                                                        div(id=`popup-${index}-popup`, style="display: none; font-size:14px")= `${malReport.user_Mal.firstName} ${malReport.user_Mal.lastName}`

                                                if !detail.status
                                                            each malReport in data.malReports
                                                                if(detail._id.toString() === malReport.idComponentDetail_Mal)

                                                                    div(id=`popupStatus-${index}`)

                                                                      -const createAt = malReport.createAt_Mal;
                                                                      -const formattedDate = createAt.toLocaleDateString('de-DE', { day: '2-digit', month: '2-digit', year: 'numeric' });
                                                                      -const formattedTime = createAt.toLocaleTimeString('de-DE', { hour: '2-digit', minute: '2-digit' });
                                                                      span(style="font-weight: bold;margin-left: 12px;")=`${malReport.estimatedStatus}%`
                                                                      span(style="margin-left: 5px;")=`${formattedDate} / ${formattedTime}`

                                                                else

                                            br

                    br

                    form.form.form-ASMAbtn-data
                        // hide these fields, do not delete! it needs the ID's!
                        br
                        input#machineID(type="hidden", name="machineID", value=data.machine._id, style="width: 300px;")
                        br
                        input#currentUserID(type="hidden",  name="currentUserID", value=data.currentUser._id, style="width: 300px;")
                        input(type="hidden", id="departmentName", name="departmentName",value=data.departmentName, style="width: 600px;")
                        input(type="hidden", id="machineName", name="machineName",value=data.machineName, style="width: 600px;")
                        input(type="hidden", id="selectedIdsInput", name="selectedIds",  style="width: 600px;")
                        input(type="hidden", id="selectedRunIdInput", name="selectedRunId", style="width: 600px;")
                        button.btn.btn--small.btn--gray(id="abszBtn") Stör- Meldung absetzen
                        br
                        br
                        br
                        br
                        br
                        a.btn.btn--small.btn--gray(href=`/api/v1/departments/${data.departmentName}/machinery/${data.machine.name}`) Zurück

    script.
      let pathValue = 'xx';

      console.log("pathValue: " + pathValue);
      const machineStatusRunBtn = document.getElementById('machineStatusRunBtn')


      if (machineStatusRunBtn.style.backgroundColor === 'lightgreen') {
        machineStatusRunBtn.textContent = 'Anlage läuft';
      } else {
        machineStatusRunBtn.textContent = 'Anlage läuft nicht';
      }
      const statusRun = machineStatusRunBtn.getAttribute('data-statusRun');
      const machineIDRun = machineStatusRunBtn.getAttribute('data-machineIDRun')
      let isOrange = true;
      let isRed = true;
      let selectedRunId = "";

      machineStatusRunBtn.addEventListener('click', function() {
        console.log("machineFireBtn click", statusRun,machineIDRun)
        if (statusRun === 'true') {
          if (isOrange) {
            machineStatusRunBtn.style.backgroundColor = 'orange';
            isOrange = false;
            isRed = false;
            selectedRunId = machineIDRun
          } else {
            machineStatusRunBtn.style.backgroundColor = 'lightgreen';
            isOrange = true;
            isPink = false;
            selectedRunId = ""
          }
        } else {
          if (isRed) {
            machineStatusRunBtn.style.backgroundColor = 'pink';
            isRed = false;
            isOrange = false;
          } else {
            machineStatusRunBtn.style.backgroundColor = 'red';
            isRed = true;
            isOrange = false;
          }
        }
      })

      const stoerBtns = document.querySelectorAll('.stoerBtn');
      const selectedIds = [];

      stoerBtns.forEach(function(btn) {
        let status = btn.getAttribute('data-status');
        let componentDetail_id = btn.getAttribute('data-detail-id');
        let isYellow = true;
        let isPink = true;

        btn.addEventListener('click', function() {
          if (status === 'true') {
            if (isYellow) {
              btn.style.backgroundColor = 'yellow';
              isYellow = false;
              isPink = false;
              selectedIds.push(componentDetail_id); // data-detail-id to the array
            } else {
              btn.style.backgroundColor = 'green';
              isYellow = true;
              isPink = false;
              selectedIds.splice(selectedIds.indexOf(componentDetail_id), 1); // delete data-detail-id from the array
            }
          } else {
            if (isPink) {
              btn.style.backgroundColor = 'pink';
              isPink = false;
              isYellow = false;
            } else {
              btn.style.backgroundColor = 'red';
              isPink = true;
              isYellow = false;
            }
          }
        });
      });

      const abszBtn = document.getElementById('abszBtn');

      abszBtn.addEventListener('click', function() {
        console.log(selectedIds); // Array with self-choosed data-detail-ids
        console.log(selectedRunId)
        selectedIdsInput.value = JSON.stringify(selectedIds);
        selectedRunIdInput.value = JSON.stringify(selectedRunId);
        // Send this array to the hidden inputFelds, in the form near btn Absetzen
      });

      function setupPopup () {
        var popupTriggers = document.querySelectorAll('.stoerBtn.popup-trigger');
        popupTriggers.forEach(function(trigger) {
          const index = trigger.id.split('-')[1];
          const detailStatus = trigger.dataset.status === 'true';

          if (!detailStatus) { // Only if the button is red, the popup setup is running
            trigger.addEventListener('mouseover', function() {
              showPopup(trigger);
            });
            trigger.addEventListener('mouseout', function() {
              hidePopup(trigger);
            });
          }
        });
      }

      function showPopup (button) {
        const popup = button.nextElementSibling;
        popup.style.display = 'block';
      }

      function hidePopup (button) {
        const popup = button.nextElementSibling;
        popup.style.display = 'none';
      }

      setupPopup();